import os
import logging
import time
import asyncio
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, MessageHandler, CommandHandler, CallbackQueryHandler, ContextTypes, filters
from PIL import Image
import numpy as np
import easyocr
import requests

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU
try:
    import torch
    use_gpu = torch.cuda.is_available()
except ImportError:
    use_gpu = False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EasyOCR –¥–ª—è –∫–∏—Ç–∞–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
reader = easyocr.Reader(['ch_sim'], gpu=use_gpu)

# -------------------------
# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
# -------------------------

pending_data = {}  # {user_id: {"texts": [...], "task": Task, "start_time": ...}}

# -------------------------
# –§—É–Ω–∫—Ü–∏–∏ –æ—á–∏—Å—Ç–∫–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
# -------------------------

def clean_text(text):
    """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç"""
    replacements = {
        "**": "",
        "*": "",
        "- ": "",
        "‚Ä¢ ": "",
        "1.": "",
        "2.": "",
        "3.": "",
        "4.": "",
        "5.": "",
        "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞": "üõí ",
        "–û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏": "\n‚öôÔ∏è ",
        "–¶–µ–Ω–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã": "\nüí∞ ",
        "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞": "\n‚úÖ ",
        "–û—Ç–∑—ã–≤—ã": "\nüåü ",
        "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è": "\n‚ÑπÔ∏è "
    }
    for old, new in replacements.items():
        text = text.replace(old, new)
    return text.strip()

# -------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Ñ–æ—Ç–æ
# -------------------------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üì∑ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data="start_analysis")],
        [InlineKeyboardButton("üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="repeat_analysis")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å Taobao.\n\n"
                                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞, –∏ —è:\n"
                                    "üîπ –û–±—ä–µ–¥–∏–Ω—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n"
                                    "üîπ –ü–µ—Ä–µ–≤–µ–¥—É –Ω–∞ —Ä—É—Å—Å–∫–∏–π\n"
                                    "üîπ –í–µ—Ä–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ü–µ–Ω–∞–º–∏ –≤ —é–∞–Ω—è—Ö ¬•", 
                                    reply_markup=reply_markup)


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "start_analysis":
        await query.edit_message_text("üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Å Taobao. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥.")
    elif query.data == "repeat_analysis":
        await query.edit_message_text("üîÑ –ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑.")


async def process_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        photo_file = await update.message.photo[-1].get_file()
        image_path = await photo_file.download_to_drive()

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image = Image.open(image_path)
        image_np = np.array(image)

        # –†–∞—Å–ø–æ–∑–Ω–∞—ë–º —Ç–µ–∫—Å—Ç
        results = reader.readtext(image_np)
        chinese_text = "\n".join([res[1] for res in results])

        if not chinese_text:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç
        if user_id not in pending_data:
            pending_data[user_id] = {
                "texts": [],
                "task": None,
                "start_time": time.time()
            }

        pending_data[user_id]["texts"].append(chinese_text)
        count = len(pending_data[user_id]["texts"])
        await update.message.reply_text(f"üß† –¢–µ–∫—Å—Ç —Å {count}-–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω.")

        # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if pending_data[user_id]["task"]:
            pending_data[user_id]["task"].cancel()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        pending_data[user_id]["task"] = context.application.create_task(
            delayed_finalize(user_id, context)
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")


async def delayed_finalize(user_id, context):
    try:
        # –ñ–¥—ë–º 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        await asyncio.sleep(10)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –Ω–æ–≤—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è
        data = pending_data.get(user_id)
        if not data or not data["texts"]:
            return

        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        await finalize_auto(user_id, context)

    except asyncio.CancelledError:
        # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        pass


async def finalize_auto(user_id, context):
    logger.info(f"–ê–≤—Ç–æ-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    data = pending_data.get(user_id)
    if not data or not data["texts"]:
        return

    total_text = "\n\n".join(data["texts"])
    elapsed = round(time.time() - data["start_time"], 1)

    try:
        await context.bot.send_message(chat_id=user_id, text="üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–æ –≤—Å–µ—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤...")

        prompt = f"""
        –¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞. 
        –ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å Taobao —Å–æ–∑–¥–∞–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

        –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
        1. –¢–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫, –±–µ–∑ –∫–∏—Ç–∞–π—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        2. –¶–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤
        3. –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        4. –í–∫–ª—é—á–∏ –≤—Å–µ –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏:
           - –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
           - –ú–∞—Ç–µ—Ä–∏–∞–ª –∏ —Ä–∞–∑–º–µ—Ä—ã
           - –í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∏ —Ü–µ–Ω—ã (—É–∫–∞–∑—ã–≤–∞–π –≤ —é–∞–Ω—è—Ö ¬•)
           - –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
           - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ
           - –°–∫–∏–¥–∫–∏ –∏ –∞–∫—Ü–∏–∏
           - –û—Ç–∑—ã–≤—ã (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ –∏—Å—Ö–æ–¥–Ω–∏–∫–µ)

        –ò–∑–±–µ–≥–∞–π:
        - –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (** /* –∏ —Ç.–¥.)
        - –ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤
        - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–æ–º–µ—Ç–æ–∫

        –í–æ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
        {total_text}
        """

        headers = {
            "Authorization": f"Bearer {os.getenv('DEEPSEEK_API_KEY')}",
            "Content-Type": "application/json"
        }

        data_req = {
            "model": "deepseek-chat",
            "messages": [{"role": "user", "content": prompt}],
            "temperature": 0.3
        }

        response = requests.post(
            "https://api.deepseek.com/v1/chat/completions", 
            headers=headers,
            json=data_req,
            timeout=60
        )

        if response.status_code == 200:
            raw_text = response.json()['choices'][0]['message']['content']
            cleaned_text = clean_text(raw_text)
            final_text = f"{cleaned_text}\n\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n‚ÑπÔ∏è –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã."

            await context.bot.send_message(chat_id=user_id, text=f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {elapsed} —Å–µ–∫—É–Ω–¥!")
            await context.bot.send_message(chat_id=user_id, text=final_text)
        else:
            error_msg = f"–û—à–∏–±–∫–∞ API: {response.text}"
            logger.error(error_msg)
            await context.bot.send_message(chat_id=user_id, text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏.")

        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        pending_data.pop(user_id, None)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ-–æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        await context.bot.send_message(chat_id=user_id, text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ.")


# -------------------------
# –ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
# -------------------------

def run_bot():
    while True:
        try:
            print("üîÑ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
            application = Application.builder().token(os.getenv("TELEGRAM_TOKEN")).build()

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            application.add_handler(CommandHandler("start", start))
            application.add_handler(CallbackQueryHandler(button_handler))
            application.add_handler(MessageHandler(filters.PHOTO, process_image))

            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            application.run_polling()
        except Exception as e:
            logger.error(f"–ë–æ—Ç —É–ø–∞–ª: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...", exc_info=True)
            time.sleep(10)


# -------------------------
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# -------------------------

if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    run_bot()